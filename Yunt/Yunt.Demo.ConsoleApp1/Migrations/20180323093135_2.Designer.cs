// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;
using Yunt.Demo.ConsoleApp1;

namespace Yunt.Demo.ConsoleApp1.Migrations
{
    [DbContext(typeof(DeviceContext))]
    [Migration("20180323093135_2")]
    partial class _2
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn)
                .HasAnnotation("ProductVersion", "2.0.1-rtm-125");

            modelBuilder.Entity("Yunt.Device.Repository.EF.Models.ConeCrusher", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<float>("AbsSpindleTravel");

                    b.Property<float>("ActivePower");

                    b.Property<float>("Current_A");

                    b.Property<float>("Current_B");

                    b.Property<float>("Current_C");

                    b.Property<string>("MotorId");

                    b.Property<float>("MovaStress");

                    b.Property<float>("OilFeedTempreature");

                    b.Property<float>("OilReturnTempreatur");

                    b.Property<float>("PowerFactor");

                    b.Property<float>("SpindleTravel");

                    b.Property<float>("TankTemperature");

                    b.Property<DateTimeOffset>("Time");

                    b.Property<float>("Vibrate1");

                    b.Property<float>("Vibrate2");

                    b.Property<float>("Voltage_A");

                    b.Property<float>("Voltage_B");

                    b.Property<float>("Voltage_C");

                    b.Property<float>("WearValue1");

                    b.Property<float>("WearValue2");

                    b.HasKey("Id");

                    b.HasIndex("MotorId")
                        .IsUnique()
                        .HasAnnotation("MySql:SpatialIndex", true);

                    b.ToTable("ConeCrusher");
                });

            modelBuilder.Entity("Yunt.Device.Repository.EF.Models.ConeCrusherByDay", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<float>("ActivePower");

                    b.Property<float>("AvgAbsSpindleTravel");

                    b.Property<float>("AvgCurrent_A");

                    b.Property<float>("AvgCurrent_B");

                    b.Property<float>("AvgCurrent_C");

                    b.Property<float>("AvgMovaStress");

                    b.Property<float>("AvgOilFeedTempreature");

                    b.Property<float>("AvgOilReturnTempreatur");

                    b.Property<float>("AvgPowerFactor");

                    b.Property<float>("AvgSpindleTravel");

                    b.Property<float>("AvgTankTemperature");

                    b.Property<float>("AvgVibrate1");

                    b.Property<float>("AvgVibrate2");

                    b.Property<float>("AvgVoltage_A");

                    b.Property<float>("AvgVoltage_B");

                    b.Property<float>("AvgVoltage_C");

                    b.Property<float>("LoadStall");

                    b.Property<string>("MotorId");

                    b.Property<float>("RunningTime");

                    b.Property<DateTimeOffset>("Time");

                    b.Property<float>("WearValue1");

                    b.Property<float>("WearValue2");

                    b.HasKey("Id");

                    b.ToTable("ConeCrusherByDay");
                });

            modelBuilder.Entity("Yunt.Device.Repository.EF.Models.ConeCrusherByHour", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<float>("ActivePower");

                    b.Property<float>("AvgAbsSpindleTravel");

                    b.Property<float>("AvgCurrent_A");

                    b.Property<float>("AvgCurrent_B");

                    b.Property<float>("AvgCurrent_C");

                    b.Property<float>("AvgMovaStress");

                    b.Property<float>("AvgOilFeedTempreature");

                    b.Property<float>("AvgOilReturnTempreatur");

                    b.Property<float>("AvgPowerFactor");

                    b.Property<float>("AvgSpindleTravel");

                    b.Property<float>("AvgTankTemperature");

                    b.Property<float>("AvgVibrate1");

                    b.Property<float>("AvgVibrate2");

                    b.Property<float>("AvgVoltage_A");

                    b.Property<float>("AvgVoltage_B");

                    b.Property<float>("AvgVoltage_C");

                    b.Property<float>("LoadStall");

                    b.Property<string>("MotorId");

                    b.Property<float>("RunningTime");

                    b.Property<DateTimeOffset>("Time");

                    b.Property<float>("WearValue1");

                    b.Property<float>("WearValue2");

                    b.HasKey("Id");

                    b.HasIndex("MotorId")
                        .IsUnique()
                        .HasAnnotation("MySql:SpatialIndex", true);

                    b.ToTable("ConeCrusherByHour");
                });

            modelBuilder.Entity("Yunt.Device.Repository.EF.Models.Conveyor", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<float>("AccumulativeWeight");

                    b.Property<float>("ActivePower");

                    b.Property<float>("Current_A");

                    b.Property<float>("Current_B");

                    b.Property<float>("Current_C");

                    b.Property<float>("GravitySensorMill");

                    b.Property<float>("InstantWeight");

                    b.Property<float>("MS420mA");

                    b.Property<string>("MotorId");

                    b.Property<float>("PowerFactor");

                    b.Property<float>("PulsesSecond");

                    b.Property<DateTimeOffset>("Time");

                    b.Property<float>("Voltage_A");

                    b.Property<float>("Voltage_B");

                    b.Property<float>("Voltage_C");

                    b.Property<float>("WeightUnit");

                    b.HasKey("Id");

                    b.HasIndex("MotorId")
                        .IsUnique()
                        .HasAnnotation("MySql:SpatialIndex", true);

                    b.ToTable("Conveyor");
                });

            modelBuilder.Entity("Yunt.Device.Repository.EF.Models.ConveyorByDay", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<float>("AccumulativeWeight");

                    b.Property<float>("ActivePower");

                    b.Property<float>("AvgCurrent_A");

                    b.Property<float>("AvgCurrent_B");

                    b.Property<float>("AvgCurrent_C");

                    b.Property<float>("AvgGravitySensorMill");

                    b.Property<float>("AvgInstantWeight");

                    b.Property<float>("AvgMS420mA");

                    b.Property<float>("AvgPowerFactor");

                    b.Property<float>("AvgPulsesSecond");

                    b.Property<float>("AvgVoltage_A");

                    b.Property<float>("AvgVoltage_B");

                    b.Property<float>("AvgVoltage_C");

                    b.Property<float>("AvgWeightUnit");

                    b.Property<float>("LoadStall");

                    b.Property<string>("MotorId");

                    b.Property<float>("RunningTime");

                    b.Property<DateTimeOffset>("Time");

                    b.HasKey("Id");

                    b.HasIndex("MotorId")
                        .IsUnique()
                        .HasAnnotation("MySql:SpatialIndex", true);

                    b.ToTable("ConveyorByDay");
                });

            modelBuilder.Entity("Yunt.Device.Repository.EF.Models.ConveyorByHour", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<float>("AccumulativeWeight");

                    b.Property<float>("ActivePower");

                    b.Property<float>("AvgCurrent_A");

                    b.Property<float>("AvgCurrent_B");

                    b.Property<float>("AvgCurrent_C");

                    b.Property<float>("AvgGravitySensorMill");

                    b.Property<float>("AvgInstantWeight");

                    b.Property<float>("AvgMS420mA");

                    b.Property<float>("AvgPowerFactor");

                    b.Property<float>("AvgPulsesSecond");

                    b.Property<float>("AvgVoltage_A");

                    b.Property<float>("AvgVoltage_B");

                    b.Property<float>("AvgVoltage_C");

                    b.Property<float>("AvgWeightUnit");

                    b.Property<float>("LoadStall");

                    b.Property<string>("MotorId");

                    b.Property<float>("RunningTime");

                    b.Property<DateTimeOffset>("Time");

                    b.HasKey("Id");

                    b.HasIndex("MotorId")
                        .IsUnique()
                        .HasAnnotation("MySql:SpatialIndex", true);

                    b.ToTable("ConveyorByHour");
                });

            modelBuilder.Entity("Yunt.Device.Repository.EF.Models.DoubleToothRollCrusher", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<float>("Current");

                    b.Property<float>("Current2");

                    b.Property<string>("MotorId");

                    b.Property<DateTimeOffset>("Time");

                    b.HasKey("Id");

                    b.ToTable("DoubleToothRollCrusher");
                });

            modelBuilder.Entity("Yunt.Device.Repository.EF.Models.DoubleToothRollCrusherByDay", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<float>("Current");

                    b.Property<float>("Current2");

                    b.Property<float>("LoadStall");

                    b.Property<string>("MotorId");

                    b.Property<float>("RunningTime");

                    b.Property<DateTimeOffset>("Time");

                    b.HasKey("Id");

                    b.ToTable("DoubleToothRollCrusherByDay");
                });

            modelBuilder.Entity("Yunt.Device.Repository.EF.Models.DoubleToothRollCrusherByHour", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<float>("Current");

                    b.Property<float>("Current2");

                    b.Property<float>("LoadStall");

                    b.Property<string>("MotorId");

                    b.Property<float>("RunningTime");

                    b.Property<DateTimeOffset>("Time");

                    b.HasKey("Id");

                    b.ToTable("DoubleToothRollCrusherByHour");
                });

            modelBuilder.Entity("Yunt.Device.Repository.EF.Models.HVib", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<float>("ActivePower");

                    b.Property<float>("Current_A");

                    b.Property<float>("Current_B");

                    b.Property<float>("Current_C");

                    b.Property<string>("MotorId");

                    b.Property<float>("OilFeedStress");

                    b.Property<float>("OilReturnStress");

                    b.Property<float>("PowerFactor");

                    b.Property<float>("SpindleTemperature1");

                    b.Property<float>("SpindleTemperature2");

                    b.Property<float>("SpindleTemperature3");

                    b.Property<float>("SpindleTemperature4");

                    b.Property<DateTimeOffset>("Time");

                    b.Property<float>("Voltage_A");

                    b.Property<float>("Voltage_B");

                    b.Property<float>("Voltage_C");

                    b.HasKey("Id");

                    b.HasIndex("MotorId")
                        .IsUnique()
                        .HasAnnotation("MySql:SpatialIndex", true);

                    b.ToTable("HVib");
                });

            modelBuilder.Entity("Yunt.Device.Repository.EF.Models.HVibByDay", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<float>("ActivePower");

                    b.Property<float>("AvgCurrent_A");

                    b.Property<float>("AvgCurrent_B");

                    b.Property<float>("AvgCurrent_C");

                    b.Property<float>("AvgOilFeedStress");

                    b.Property<float>("AvgOilReturnStress");

                    b.Property<float>("AvgPowerFactor");

                    b.Property<float>("AvgSpindleTemperature1");

                    b.Property<float>("AvgSpindleTemperature2");

                    b.Property<float>("AvgSpindleTemperature3");

                    b.Property<float>("AvgSpindleTemperature4");

                    b.Property<float>("AvgVoltage_A");

                    b.Property<float>("AvgVoltage_B");

                    b.Property<float>("AvgVoltage_C");

                    b.Property<float>("LoadStall");

                    b.Property<string>("MotorId");

                    b.Property<float>("RunningTime");

                    b.Property<DateTimeOffset>("Time");

                    b.HasKey("Id");

                    b.HasIndex("MotorId")
                        .IsUnique()
                        .HasAnnotation("MySql:SpatialIndex", true);

                    b.ToTable("HVibByDay");
                });

            modelBuilder.Entity("Yunt.Device.Repository.EF.Models.HVibByHour", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<float>("ActivePower");

                    b.Property<float>("AvgCurrent_A");

                    b.Property<float>("AvgCurrent_B");

                    b.Property<float>("AvgCurrent_C");

                    b.Property<float>("AvgOilFeedStress");

                    b.Property<float>("AvgOilReturnStress");

                    b.Property<float>("AvgPowerFactor");

                    b.Property<float>("AvgSpindleTemperature1");

                    b.Property<float>("AvgSpindleTemperature2");

                    b.Property<float>("AvgSpindleTemperature3");

                    b.Property<float>("AvgSpindleTemperature4");

                    b.Property<float>("AvgVoltage_A");

                    b.Property<float>("AvgVoltage_B");

                    b.Property<float>("AvgVoltage_C");

                    b.Property<float>("LoadStall");

                    b.Property<string>("MotorId");

                    b.Property<float>("RunningTime");

                    b.Property<DateTimeOffset>("Time");

                    b.HasKey("Id");

                    b.HasIndex("MotorId")
                        .IsUnique()
                        .HasAnnotation("MySql:SpatialIndex", true);

                    b.ToTable("HVibByHour");
                });

            modelBuilder.Entity("Yunt.Device.Repository.EF.Models.IdModel.MotorIdFactories", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("MotorIndex");

                    b.Property<string>("MotorTypeId");

                    b.Property<string>("ProductionLineId");

                    b.Property<DateTimeOffset>("Time");

                    b.HasKey("Id");

                    b.ToTable("MotorIdFactories");
                });

            modelBuilder.Entity("Yunt.Device.Repository.EF.Models.ImpactCrusher", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<float>("Motor1ActivePower");

                    b.Property<float>("Motor1Current_A");

                    b.Property<float>("Motor1Current_B");

                    b.Property<float>("Motor1Current_C");

                    b.Property<float>("Motor1PowerFactor");

                    b.Property<float>("Motor1Voltage_A");

                    b.Property<float>("Motor1Voltage_B");

                    b.Property<float>("Motor1Voltage_C");

                    b.Property<float>("Motor2ActivePower");

                    b.Property<float>("Motor2Current_A");

                    b.Property<float>("Motor2Current_B");

                    b.Property<float>("Motor2Current_C");

                    b.Property<float>("Motor2PowerFactor");

                    b.Property<float>("Motor2Voltage_A");

                    b.Property<float>("Motor2Voltage_B");

                    b.Property<float>("Motor2Voltage_C");

                    b.Property<string>("MotorId");

                    b.Property<float>("SpindleTemperature1");

                    b.Property<float>("SpindleTemperature2");

                    b.Property<DateTimeOffset>("Time");

                    b.Property<float>("Vibrate1");

                    b.Property<float>("Vibrate2");

                    b.Property<float>("WearValue1");

                    b.Property<float>("WearValue2");

                    b.HasKey("Id");

                    b.HasIndex("MotorId")
                        .IsUnique()
                        .HasAnnotation("MySql:SpatialIndex", true);

                    b.ToTable("ImpactCrusher");
                });

            modelBuilder.Entity("Yunt.Device.Repository.EF.Models.ImpactCrusherByDay", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<float>("AvgMotor1Current_A");

                    b.Property<float>("AvgMotor1Current_B");

                    b.Property<float>("AvgMotor1Current_C");

                    b.Property<float>("AvgMotor1PowerFactor");

                    b.Property<float>("AvgMotor1Voltage_A");

                    b.Property<float>("AvgMotor1Voltage_B");

                    b.Property<float>("AvgMotor1Voltage_C");

                    b.Property<float>("AvgMotor2Current_A");

                    b.Property<float>("AvgMotor2Current_B");

                    b.Property<float>("AvgMotor2Current_C");

                    b.Property<float>("AvgMotor2PowerFactor");

                    b.Property<float>("AvgMotor2Voltage_A");

                    b.Property<float>("AvgMotor2Voltage_B");

                    b.Property<float>("AvgMotor2Voltage_C");

                    b.Property<float>("AvgSpindleTemperature1");

                    b.Property<float>("AvgSpindleTemperature2");

                    b.Property<float>("AvgVibrate1");

                    b.Property<float>("AvgVibrate2");

                    b.Property<float>("LoadStall");

                    b.Property<float>("Motor1ActivePower");

                    b.Property<float>("Motor2ActivePower");

                    b.Property<string>("MotorId");

                    b.Property<float>("RunningTime");

                    b.Property<DateTimeOffset>("Time");

                    b.Property<float>("WearValue1");

                    b.Property<float>("WearValue2");

                    b.HasKey("Id");

                    b.HasIndex("MotorId")
                        .IsUnique()
                        .HasAnnotation("MySql:SpatialIndex", true);

                    b.ToTable("ImpactCrusherByDay");
                });

            modelBuilder.Entity("Yunt.Device.Repository.EF.Models.ImpactCrusherByHour", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<float>("AvgMotor1Current_A");

                    b.Property<float>("AvgMotor1Current_B");

                    b.Property<float>("AvgMotor1Current_C");

                    b.Property<float>("AvgMotor1PowerFactor");

                    b.Property<float>("AvgMotor1Voltage_A");

                    b.Property<float>("AvgMotor1Voltage_B");

                    b.Property<float>("AvgMotor1Voltage_C");

                    b.Property<float>("AvgMotor2Current_A");

                    b.Property<float>("AvgMotor2Current_B");

                    b.Property<float>("AvgMotor2Current_C");

                    b.Property<float>("AvgMotor2PowerFactor");

                    b.Property<float>("AvgMotor2Voltage_A");

                    b.Property<float>("AvgMotor2Voltage_B");

                    b.Property<float>("AvgMotor2Voltage_C");

                    b.Property<float>("AvgSpindleTemperature1");

                    b.Property<float>("AvgSpindleTemperature2");

                    b.Property<float>("AvgVibrate1");

                    b.Property<float>("AvgVibrate2");

                    b.Property<float>("LoadStall");

                    b.Property<float>("Motor1ActivePower");

                    b.Property<float>("Motor2ActivePower");

                    b.Property<string>("MotorId");

                    b.Property<float>("RunningTime");

                    b.Property<DateTimeOffset>("Time");

                    b.Property<float>("WearValue1");

                    b.Property<float>("WearValue2");

                    b.HasKey("Id");

                    b.HasIndex("MotorId")
                        .IsUnique()
                        .HasAnnotation("MySql:SpatialIndex", true);

                    b.ToTable("ImpactCrusherByHour");
                });

            modelBuilder.Entity("Yunt.Device.Repository.EF.Models.JawCrusher", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<float>("ActivePower");

                    b.Property<float>("Current_A");

                    b.Property<float>("Current_B");

                    b.Property<float>("Current_C");

                    b.Property<float>("MotiveSpindleTemperature1");

                    b.Property<float>("MotiveSpindleTemperature2");

                    b.Property<string>("MotorId");

                    b.Property<float>("PowerFactor");

                    b.Property<float>("RackSpindleTemperature1");

                    b.Property<float>("RackSpindleTemperature2");

                    b.Property<DateTimeOffset>("Time");

                    b.Property<float>("Vibrate1");

                    b.Property<float>("Vibrate2");

                    b.Property<float>("Voltage_A");

                    b.Property<float>("Voltage_B");

                    b.Property<float>("Voltage_C");

                    b.Property<float>("WearValue1");

                    b.Property<float>("WearValue2");

                    b.HasKey("Id");

                    b.HasIndex("MotorId")
                        .IsUnique()
                        .HasAnnotation("MySql:SpatialIndex", true);

                    b.ToTable("JawCrusher");
                });

            modelBuilder.Entity("Yunt.Device.Repository.EF.Models.JawCrusherByDay", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<float>("ActivePower");

                    b.Property<float>("AvgCurrent_A");

                    b.Property<float>("AvgCurrent_B");

                    b.Property<float>("AvgCurrent_C");

                    b.Property<float>("AvgMotiveSpindleTemperature1");

                    b.Property<float>("AvgMotiveSpindleTemperature2");

                    b.Property<float>("AvgPowerFactor");

                    b.Property<float>("AvgRackSpindleTemperature1");

                    b.Property<float>("AvgRackSpindleTemperature2");

                    b.Property<float>("AvgVibrate1");

                    b.Property<float>("AvgVibrate2");

                    b.Property<float>("AvgVoltage_A");

                    b.Property<float>("AvgVoltage_B");

                    b.Property<float>("AvgVoltage_C");

                    b.Property<float>("LoadStall");

                    b.Property<string>("MotorId");

                    b.Property<float>("RunningTime");

                    b.Property<DateTimeOffset>("Time");

                    b.Property<float>("WearValue1");

                    b.Property<float>("WearValue2");

                    b.HasKey("Id");

                    b.HasIndex("MotorId")
                        .IsUnique()
                        .HasAnnotation("MySql:SpatialIndex", true);

                    b.ToTable("JawCrusherByDay");
                });

            modelBuilder.Entity("Yunt.Device.Repository.EF.Models.JawCrusherByHour", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<float>("ActivePower");

                    b.Property<float>("AvgCurrent_A");

                    b.Property<float>("AvgCurrent_B");

                    b.Property<float>("AvgCurrent_C");

                    b.Property<float>("AvgMotiveSpindleTemperature1");

                    b.Property<float>("AvgMotiveSpindleTemperature2");

                    b.Property<float>("AvgPowerFactor");

                    b.Property<float>("AvgRackSpindleTemperature1");

                    b.Property<float>("AvgRackSpindleTemperature2");

                    b.Property<float>("AvgVibrate1");

                    b.Property<float>("AvgVibrate2");

                    b.Property<float>("AvgVoltage_A");

                    b.Property<float>("AvgVoltage_B");

                    b.Property<float>("AvgVoltage_C");

                    b.Property<float>("LoadStall");

                    b.Property<string>("MotorId");

                    b.Property<float>("RunningTime");

                    b.Property<DateTimeOffset>("Time");

                    b.Property<float>("WearValue1");

                    b.Property<float>("WearValue2");

                    b.HasKey("Id");

                    b.HasIndex("MotorId")
                        .IsUnique()
                        .HasAnnotation("MySql:SpatialIndex", true);

                    b.ToTable("JawCrusherByHour");
                });

            modelBuilder.Entity("Yunt.Device.Repository.EF.Models.MaterialFeeder", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<float>("ActivePower");

                    b.Property<float>("Current_A");

                    b.Property<float>("Current_B");

                    b.Property<float>("Current_C");

                    b.Property<float>("Frequency");

                    b.Property<string>("MotorId");

                    b.Property<float>("PowerFactor");

                    b.Property<DateTimeOffset>("Time");

                    b.Property<float>("Voltage_A");

                    b.Property<float>("Voltage_B");

                    b.Property<float>("Voltage_C");

                    b.HasKey("Id");

                    b.HasIndex("MotorId")
                        .IsUnique()
                        .HasAnnotation("MySql:SpatialIndex", true);

                    b.ToTable("MaterialFeeder");
                });

            modelBuilder.Entity("Yunt.Device.Repository.EF.Models.MaterialFeederByDay", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<float>("ActivePower");

                    b.Property<float>("AvgCurrent_A");

                    b.Property<float>("AvgCurrent_B");

                    b.Property<float>("AvgCurrent_C");

                    b.Property<float>("AvgFrequency");

                    b.Property<float>("AvgPowerFactor");

                    b.Property<float>("AvgVoltage_A");

                    b.Property<float>("AvgVoltage_B");

                    b.Property<float>("AvgVoltage_C");

                    b.Property<float>("LoadStall");

                    b.Property<string>("MotorId");

                    b.Property<float>("RunningTime");

                    b.Property<DateTimeOffset>("Time");

                    b.HasKey("Id");

                    b.HasIndex("MotorId")
                        .IsUnique()
                        .HasAnnotation("MySql:SpatialIndex", true);

                    b.ToTable("MaterialFeederByDay");
                });

            modelBuilder.Entity("Yunt.Device.Repository.EF.Models.MaterialFeederByHour", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<float>("ActivePower");

                    b.Property<float>("AvgCurrent_A");

                    b.Property<float>("AvgCurrent_B");

                    b.Property<float>("AvgCurrent_C");

                    b.Property<float>("AvgFrequency");

                    b.Property<float>("AvgPowerFactor");

                    b.Property<float>("AvgVoltage_A");

                    b.Property<float>("AvgVoltage_B");

                    b.Property<float>("AvgVoltage_C");

                    b.Property<float>("LoadStall");

                    b.Property<string>("MotorId");

                    b.Property<float>("RunningTime");

                    b.Property<DateTimeOffset>("Time");

                    b.HasKey("Id");

                    b.HasIndex("MotorId")
                        .IsUnique()
                        .HasAnnotation("MySql:SpatialIndex", true);

                    b.ToTable("MaterialFeederByHour");
                });

            modelBuilder.Entity("Yunt.Device.Repository.EF.Models.Motor", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<float>("Capicity");

                    b.Property<int>("EmbeddedDeviceId");

                    b.Property<float>("FeedSize");

                    b.Property<string>("FinalSize");

                    b.Property<string>("MotorId");

                    b.Property<float>("MotorPower");

                    b.Property<string>("MotorTypeId");

                    b.Property<string>("Name");

                    b.Property<string>("ProductionLineId");

                    b.Property<string>("SerialNumber");

                    b.Property<float>("StandValue");

                    b.Property<DateTimeOffset>("Time");

                    b.HasKey("Id");

                    b.HasIndex("MotorId")
                        .IsUnique()
                        .HasAnnotation("MySql:SpatialIndex", true);

                    b.ToTable("Motor");
                });

            modelBuilder.Entity("Yunt.Device.Repository.EF.Models.MotorParams", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<string>("MotorTypeId");

                    b.Property<string>("Param");

                    b.Property<DateTimeOffset>("Time");

                    b.HasKey("Id");

                    b.ToTable("MotorParams");
                });

            modelBuilder.Entity("Yunt.Device.Repository.EF.Models.MotorType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("MotorTypeId");

                    b.Property<string>("Name");

                    b.Property<DateTimeOffset>("Time");

                    b.HasKey("Id");

                    b.HasIndex("MotorTypeId")
                        .IsUnique()
                        .HasAnnotation("MySql:SpatialIndex", true);

                    b.ToTable("MotorType");
                });

            modelBuilder.Entity("Yunt.Device.Repository.EF.Models.Pulverizer", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<float>("ActivePower");

                    b.Property<float>("Current_A");

                    b.Property<float>("Current_B");

                    b.Property<float>("Current_C");

                    b.Property<string>("MotorId");

                    b.Property<float>("PowerFactor");

                    b.Property<DateTimeOffset>("Time");

                    b.Property<float>("Vibrate1");

                    b.Property<float>("Vibrate2");

                    b.Property<float>("Voltage_A");

                    b.Property<float>("Voltage_B");

                    b.Property<float>("Voltage_C");

                    b.Property<float>("WearValue1");

                    b.Property<float>("WearValue2");

                    b.HasKey("Id");

                    b.HasIndex("MotorId")
                        .IsUnique()
                        .HasAnnotation("MySql:SpatialIndex", true);

                    b.ToTable("Pulverizer");
                });

            modelBuilder.Entity("Yunt.Device.Repository.EF.Models.PulverizerByDay", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<float>("ActivePower");

                    b.Property<float>("AvgCurrent_A");

                    b.Property<float>("AvgCurrent_B");

                    b.Property<float>("AvgCurrent_C");

                    b.Property<float>("AvgPowerFactor");

                    b.Property<float>("AvgVibrate1");

                    b.Property<float>("AvgVibrate2");

                    b.Property<float>("AvgVoltage_A");

                    b.Property<float>("AvgVoltage_B");

                    b.Property<float>("AvgVoltage_C");

                    b.Property<float>("LoadStall");

                    b.Property<string>("MotorId");

                    b.Property<float>("RunningTime");

                    b.Property<DateTimeOffset>("Time");

                    b.Property<float>("WearValue1");

                    b.Property<float>("WearValue2");

                    b.HasKey("Id");

                    b.HasIndex("MotorId")
                        .IsUnique()
                        .HasAnnotation("MySql:SpatialIndex", true);

                    b.ToTable("PulverizerByDay");
                });

            modelBuilder.Entity("Yunt.Device.Repository.EF.Models.PulverizerByHour", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<float>("ActivePower");

                    b.Property<float>("AvgCurrent_A");

                    b.Property<float>("AvgCurrent_B");

                    b.Property<float>("AvgCurrent_C");

                    b.Property<float>("AvgPowerFactor");

                    b.Property<float>("AvgVibrate1");

                    b.Property<float>("AvgVibrate2");

                    b.Property<float>("AvgVoltage_A");

                    b.Property<float>("AvgVoltage_B");

                    b.Property<float>("AvgVoltage_C");

                    b.Property<float>("LoadStall");

                    b.Property<string>("MotorId");

                    b.Property<float>("RunningTime");

                    b.Property<DateTimeOffset>("Time");

                    b.Property<float>("WearValue1");

                    b.Property<float>("WearValue2");

                    b.HasKey("Id");

                    b.HasIndex("MotorId")
                        .IsUnique()
                        .HasAnnotation("MySql:SpatialIndex", true);

                    b.ToTable("PulverizerByHour");
                });

            modelBuilder.Entity("Yunt.Device.Repository.EF.Models.ReverHammerCrusher", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<float>("BearingSpeed");

                    b.Property<float>("Current");

                    b.Property<string>("MotorId");

                    b.Property<float>("SpindleTemperature1");

                    b.Property<float>("SpindleTemperature2");

                    b.Property<DateTimeOffset>("Time");

                    b.HasKey("Id");

                    b.ToTable("ReverHammerCrusher");
                });

            modelBuilder.Entity("Yunt.Device.Repository.EF.Models.ReverHammerCrusherByDay", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<float>("BearingSpeed");

                    b.Property<float>("Current");

                    b.Property<float>("LoadStall");

                    b.Property<string>("MotorId");

                    b.Property<float>("RunningTime");

                    b.Property<float>("SpindleTemperature1");

                    b.Property<float>("SpindleTemperature2");

                    b.Property<DateTimeOffset>("Time");

                    b.HasKey("Id");

                    b.ToTable("ReverHammerCrusherByDay");
                });

            modelBuilder.Entity("Yunt.Device.Repository.EF.Models.ReverHammerCrusherByHour", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<float>("BearingSpeed");

                    b.Property<float>("Current");

                    b.Property<float>("LoadStall");

                    b.Property<string>("MotorId");

                    b.Property<float>("RunningTime");

                    b.Property<float>("SpindleTemperature1");

                    b.Property<float>("SpindleTemperature2");

                    b.Property<DateTimeOffset>("Time");

                    b.HasKey("Id");

                    b.ToTable("ReverHammerCrusherByHour");
                });

            modelBuilder.Entity("Yunt.Device.Repository.EF.Models.SimonsConeCrusher", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("Current");

                    b.Property<string>("MotorId");

                    b.Property<double>("OilFeedTempreature");

                    b.Property<double>("OilReturnTempreature");

                    b.Property<double>("TankTemperature");

                    b.Property<DateTimeOffset>("Time");

                    b.HasKey("Id");

                    b.ToTable("SimonsConeCrusher");
                });

            modelBuilder.Entity("Yunt.Device.Repository.EF.Models.SimonsConeCrusherByDay", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<float>("AvgCurrent_B");

                    b.Property<float>("AvgOilFeedTempreature");

                    b.Property<float>("AvgOilReturnTempreatur");

                    b.Property<float>("AvgTankTemperature");

                    b.Property<float>("LoadStall");

                    b.Property<string>("MotorId");

                    b.Property<float>("RunningTime");

                    b.Property<DateTimeOffset>("Time");

                    b.HasKey("Id");

                    b.ToTable("SimonsConeCrusherByDay");
                });

            modelBuilder.Entity("Yunt.Device.Repository.EF.Models.SimonsConeCrusherByHour", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<float>("AvgCurrent_B");

                    b.Property<float>("AvgOilFeedTempreature");

                    b.Property<float>("AvgOilReturnTempreatur");

                    b.Property<float>("AvgTankTemperature");

                    b.Property<float>("LoadStall");

                    b.Property<string>("MotorId");

                    b.Property<float>("RunningTime");

                    b.Property<DateTimeOffset>("Time");

                    b.HasKey("Id");

                    b.ToTable("SimonsConeCrusherByHour");
                });

            modelBuilder.Entity("Yunt.Device.Repository.EF.Models.VerticalCrusher", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<float>("ActivePower");

                    b.Property<float>("Current_A");

                    b.Property<float>("Current_B");

                    b.Property<float>("Current_C");

                    b.Property<string>("MotorId");

                    b.Property<float>("PowerFactor");

                    b.Property<DateTimeOffset>("Time");

                    b.Property<float>("Vibrate1");

                    b.Property<float>("Vibrate2");

                    b.Property<float>("Voltage_A");

                    b.Property<float>("Voltage_B");

                    b.Property<float>("Voltage_C");

                    b.Property<float>("WearValue1");

                    b.Property<float>("WearValue2");

                    b.HasKey("Id");

                    b.HasIndex("MotorId")
                        .IsUnique()
                        .HasAnnotation("MySql:SpatialIndex", true);

                    b.ToTable("VerticalCrusher");
                });

            modelBuilder.Entity("Yunt.Device.Repository.EF.Models.VerticalCrusherByDay", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<float>("ActivePower");

                    b.Property<float>("AvgCurrent_A");

                    b.Property<float>("AvgCurrent_B");

                    b.Property<float>("AvgCurrent_C");

                    b.Property<float>("AvgPowerFactor");

                    b.Property<float>("AvgVibrate1");

                    b.Property<float>("AvgVibrate2");

                    b.Property<float>("AvgVoltage_A");

                    b.Property<float>("AvgVoltage_B");

                    b.Property<float>("AvgVoltage_C");

                    b.Property<float>("LoadStall");

                    b.Property<string>("MotorId");

                    b.Property<float>("RunningTime");

                    b.Property<DateTimeOffset>("Time");

                    b.Property<float>("WearValue1");

                    b.Property<float>("WearValue2");

                    b.HasKey("Id");

                    b.HasIndex("MotorId")
                        .IsUnique()
                        .HasAnnotation("MySql:SpatialIndex", true);

                    b.ToTable("VerticalCrusherByDay");
                });

            modelBuilder.Entity("Yunt.Device.Repository.EF.Models.VerticalCrusherByHour", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<float>("ActivePower");

                    b.Property<float>("AvgCurrent_A");

                    b.Property<float>("AvgCurrent_B");

                    b.Property<float>("AvgCurrent_C");

                    b.Property<float>("AvgPowerFactor");

                    b.Property<float>("AvgVibrate1");

                    b.Property<float>("AvgVibrate2");

                    b.Property<float>("AvgVoltage_A");

                    b.Property<float>("AvgVoltage_B");

                    b.Property<float>("AvgVoltage_C");

                    b.Property<float>("LoadStall");

                    b.Property<string>("MotorId");

                    b.Property<float>("RunningTime");

                    b.Property<DateTimeOffset>("Time");

                    b.Property<float>("WearValue1");

                    b.Property<float>("WearValue2");

                    b.HasKey("Id");

                    b.HasIndex("MotorId")
                        .IsUnique()
                        .HasAnnotation("MySql:SpatialIndex", true);

                    b.ToTable("VerticalCrusherByHour");
                });

            modelBuilder.Entity("Yunt.Device.Repository.EF.Models.Vibrosieve", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<float>("ActivePower");

                    b.Property<float>("Current_A");

                    b.Property<float>("Current_B");

                    b.Property<float>("Current_C");

                    b.Property<string>("MotorId");

                    b.Property<float>("PowerFactor");

                    b.Property<float>("SpindleTemperature1");

                    b.Property<float>("SpindleTemperature2");

                    b.Property<float>("SpindleTemperature3");

                    b.Property<float>("SpindleTemperature4");

                    b.Property<DateTimeOffset>("Time");

                    b.Property<float>("Voltage_A");

                    b.Property<float>("Voltage_B");

                    b.Property<float>("Voltage_C");

                    b.HasKey("Id");

                    b.HasIndex("MotorId")
                        .IsUnique()
                        .HasAnnotation("MySql:SpatialIndex", true);

                    b.ToTable("Vibrosieve");
                });

            modelBuilder.Entity("Yunt.Device.Repository.EF.Models.VibrosieveByDay", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<float>("ActivePower");

                    b.Property<float>("AvgCurrent_A");

                    b.Property<float>("AvgCurrent_B");

                    b.Property<float>("AvgCurrent_C");

                    b.Property<float>("AvgPowerFactor");

                    b.Property<float>("AvgSpindleTemperature1");

                    b.Property<float>("AvgSpindleTemperature2");

                    b.Property<float>("AvgSpindleTemperature3");

                    b.Property<float>("AvgSpindleTemperature4");

                    b.Property<float>("AvgVoltage_A");

                    b.Property<float>("AvgVoltage_B");

                    b.Property<float>("AvgVoltage_C");

                    b.Property<float>("LoadStall");

                    b.Property<string>("MotorId");

                    b.Property<float>("RunningTime");

                    b.Property<DateTimeOffset>("Time");

                    b.HasKey("Id");

                    b.HasIndex("MotorId")
                        .IsUnique()
                        .HasAnnotation("MySql:SpatialIndex", true);

                    b.ToTable("VibrosieveByDay");
                });

            modelBuilder.Entity("Yunt.Device.Repository.EF.Models.VibrosieveByHour", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<float>("ActivePower");

                    b.Property<float>("AvgCurrent_A");

                    b.Property<float>("AvgCurrent_B");

                    b.Property<float>("AvgCurrent_C");

                    b.Property<float>("AvgPowerFactor");

                    b.Property<float>("AvgSpindleTemperature1");

                    b.Property<float>("AvgSpindleTemperature2");

                    b.Property<float>("AvgSpindleTemperature3");

                    b.Property<float>("AvgSpindleTemperature4");

                    b.Property<float>("AvgVoltage_A");

                    b.Property<float>("AvgVoltage_B");

                    b.Property<float>("AvgVoltage_C");

                    b.Property<float>("LoadStall");

                    b.Property<string>("MotorId");

                    b.Property<float>("RunningTime");

                    b.Property<DateTimeOffset>("Time");

                    b.HasKey("Id");

                    b.HasIndex("MotorId")
                        .IsUnique()
                        .HasAnnotation("MySql:SpatialIndex", true);

                    b.ToTable("VibrosieveByHour");
                });
#pragma warning restore 612, 618
        }
    }
}
