// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;
using Yunt.Demo.ConsoleApp1;

namespace Yunt.Demo.ConsoleApp1.Migrations
{
    [DbContext(typeof(DeviceContext))]
    partial class DeviceContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn)
                .HasAnnotation("ProductVersion", "2.0.1-rtm-125");

            modelBuilder.Entity("Yunt.Device.Repository.EF.Models.ConeCrusher", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("Current");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("MotorId");

                    b.Property<double>("MovaStress");

                    b.Property<double>("OilFeedTempreature");

                    b.Property<double>("OilReturnTempreature");

                    b.Property<double>("PowerFactor");

                    b.Property<double>("ReactivePower");

                    b.Property<double>("SpindleTravel");

                    b.Property<double>("TankTemperature");

                    b.Property<DateTimeOffset>("Time");

                    b.Property<double>("TotalPower");

                    b.Property<double>("Voltage");

                    b.HasKey("Id");

                    b.ToTable("ConeCrusher");
                });

            modelBuilder.Entity("Yunt.Device.Repository.EF.Models.ConeCrusherByDay", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("AverageCurrent");

                    b.Property<double>("AverageMovaStress");

                    b.Property<double>("AverageOilFeedTempreature");

                    b.Property<double>("AverageOilReturnTempreature");

                    b.Property<double>("AverageSpindleTravel");

                    b.Property<double>("AverageTankTemperature");

                    b.Property<bool>("IsDeleted");

                    b.Property<double>("LoadStall");

                    b.Property<string>("MotorId");

                    b.Property<double>("RunningTime");

                    b.Property<DateTimeOffset>("Time");

                    b.HasKey("Id");

                    b.ToTable("ConeCrusherByDay");
                });

            modelBuilder.Entity("Yunt.Device.Repository.EF.Models.ConeCrusherByHour", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("AverageCurrent");

                    b.Property<double>("AverageMovaStress");

                    b.Property<double>("AverageOilFeedTempreature");

                    b.Property<double>("AverageOilReturnTempreature");

                    b.Property<double>("AverageSpindleTravel");

                    b.Property<double>("AverageTankTemperature");

                    b.Property<bool>("IsDeleted");

                    b.Property<double>("LoadStall");

                    b.Property<string>("MotorId");

                    b.Property<double>("RunningTime");

                    b.Property<DateTimeOffset>("Time");

                    b.HasKey("Id");

                    b.ToTable("ConeCrusherByHour");
                });

            modelBuilder.Entity("Yunt.Device.Repository.EF.Models.Conveyor", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("AccumulativeWeight");

                    b.Property<int>("BootFlagBit");

                    b.Property<double>("Current");

                    b.Property<double>("Frequency");

                    b.Property<double>("InstantWeight");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("MotorId");

                    b.Property<double>("PowerFactor");

                    b.Property<double>("ReactivePower");

                    b.Property<DateTimeOffset>("Time");

                    b.Property<double>("TotalPower");

                    b.Property<int>("Unit");

                    b.Property<double>("Velocity");

                    b.Property<double>("Voltage");

                    b.Property<int>("ZeroCalibration");

                    b.HasKey("Id");

                    b.ToTable("Conveyor");
                });

            modelBuilder.Entity("Yunt.Device.Repository.EF.Models.ConveyorByDay", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("AccumulativeWeight");

                    b.Property<double>("AverageCurrent");

                    b.Property<double>("AverageFrequency");

                    b.Property<double>("AverageInstantWeight");

                    b.Property<double>("AveragePowerFactor");

                    b.Property<double>("AverageReactivePower");

                    b.Property<double>("AverageTotalPower");

                    b.Property<double>("AverageVelocity");

                    b.Property<double>("AverageVoltage");

                    b.Property<bool>("IsDeleted");

                    b.Property<double>("LoadStall");

                    b.Property<string>("MotorId");

                    b.Property<double>("RunningTime");

                    b.Property<DateTimeOffset>("Time");

                    b.HasKey("Id");

                    b.ToTable("ConveyorByDay");
                });

            modelBuilder.Entity("Yunt.Device.Repository.EF.Models.ConveyorByHour", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("AccumulativeWeight");

                    b.Property<double>("AverageCurrent");

                    b.Property<double>("AverageFrequency");

                    b.Property<double>("AverageInstantWeight");

                    b.Property<double>("AveragePowerFactor");

                    b.Property<double>("AverageReactivePower");

                    b.Property<double>("AverageTotalPower");

                    b.Property<double>("AverageVelocity");

                    b.Property<double>("AverageVoltage");

                    b.Property<bool>("IsDeleted");

                    b.Property<double>("LoadStall");

                    b.Property<string>("MotorId");

                    b.Property<double>("RunningTime");

                    b.Property<DateTimeOffset>("Time");

                    b.HasKey("Id");

                    b.ToTable("ConveyorByHour");
                });

            modelBuilder.Entity("Yunt.Device.Repository.EF.Models.DoubleToothRollCrusher", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("Current");

                    b.Property<double>("Current2");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("MotorId");

                    b.Property<DateTimeOffset>("Time");

                    b.HasKey("Id");

                    b.ToTable("DoubleToothRollCrusher");
                });

            modelBuilder.Entity("Yunt.Device.Repository.EF.Models.DoubleToothRollCrusherByDay", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("Current");

                    b.Property<double>("Current2");

                    b.Property<bool>("IsDeleted");

                    b.Property<double>("LoadStall");

                    b.Property<string>("MotorId");

                    b.Property<double>("RunningTime");

                    b.Property<DateTimeOffset>("Time");

                    b.HasKey("Id");

                    b.ToTable("DoubleToothRollCrusherByDay");
                });

            modelBuilder.Entity("Yunt.Device.Repository.EF.Models.DoubleToothRollCrusherByHour", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("Current");

                    b.Property<double>("Current2");

                    b.Property<bool>("IsDeleted");

                    b.Property<double>("LoadStall");

                    b.Property<string>("MotorId");

                    b.Property<double>("RunningTime");

                    b.Property<DateTimeOffset>("Time");

                    b.HasKey("Id");

                    b.ToTable("DoubleToothRollCrusherByHour");
                });

            modelBuilder.Entity("Yunt.Device.Repository.EF.Models.IdModel.MotorIdFactories", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("MotorIndex");

                    b.Property<string>("MotorTypeId");

                    b.Property<string>("ProductionLineId");

                    b.Property<DateTimeOffset>("Time");

                    b.HasKey("Id");

                    b.ToTable("MotorIdFactories");
                });

            modelBuilder.Entity("Yunt.Device.Repository.EF.Models.ImpactCrusher", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("Current");

                    b.Property<double>("Current2");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("MotorId");

                    b.Property<double>("SpindleTemperature1");

                    b.Property<double>("SpindleTemperature2");

                    b.Property<DateTimeOffset>("Time");

                    b.HasKey("Id");

                    b.ToTable("ImpactCrusher");
                });

            modelBuilder.Entity("Yunt.Device.Repository.EF.Models.ImpactCrusherByDay", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("AverageCurrent");

                    b.Property<double>("AverageCurrent2");

                    b.Property<double>("AverageSpindleTemperature1");

                    b.Property<double>("AverageSpindleTemperature2");

                    b.Property<bool>("IsDeleted");

                    b.Property<double>("LoadStall");

                    b.Property<string>("MotorId");

                    b.Property<int>("OnOffCounts");

                    b.Property<double>("RunningTime");

                    b.Property<DateTimeOffset>("Time");

                    b.HasKey("Id");

                    b.ToTable("ImpactCrusherByDay");
                });

            modelBuilder.Entity("Yunt.Device.Repository.EF.Models.ImpactCrusherByHour", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("AverageCurrent");

                    b.Property<double>("AverageCurrent2");

                    b.Property<double>("AverageSpindleTemperature1");

                    b.Property<double>("AverageSpindleTemperature2");

                    b.Property<bool>("IsDeleted");

                    b.Property<double>("LoadStall");

                    b.Property<string>("MotorId");

                    b.Property<int>("OnOffCounts");

                    b.Property<double>("RunningTime");

                    b.Property<DateTimeOffset>("Time");

                    b.HasKey("Id");

                    b.ToTable("ImpactCrusherByHour");
                });

            modelBuilder.Entity("Yunt.Device.Repository.EF.Models.JawCrusher", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("Current");

                    b.Property<bool>("IsDeleted");

                    b.Property<double>("MotiveSpindleTemperature1");

                    b.Property<double>("MotiveSpindleTemperature2");

                    b.Property<string>("MotorId");

                    b.Property<double>("PowerFactor");

                    b.Property<double>("RackSpindleTemperature1");

                    b.Property<double>("RackSpindleTemperature2");

                    b.Property<double>("ReactivePower");

                    b.Property<DateTimeOffset>("Time");

                    b.Property<double>("TotalPower");

                    b.Property<double>("Voltage");

                    b.HasKey("Id");

                    b.ToTable("JawCrusher");
                });

            modelBuilder.Entity("Yunt.Device.Repository.EF.Models.JawCrusherByDay", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("AverageCurrent");

                    b.Property<double>("AverageMotiveSpindleTemperature1");

                    b.Property<double>("AverageMotiveSpindleTemperature2");

                    b.Property<double>("AveragePowerFactor");

                    b.Property<double>("AverageRackSpindleTemperature1");

                    b.Property<double>("AverageRackSpindleTemperature2");

                    b.Property<double>("AverageReactivePower");

                    b.Property<double>("AverageTotalPower");

                    b.Property<double>("AverageVoltage");

                    b.Property<bool>("IsDeleted");

                    b.Property<double>("LoadStall");

                    b.Property<string>("MotorId");

                    b.Property<double>("RunningTime");

                    b.Property<DateTimeOffset>("Time");

                    b.HasKey("Id");

                    b.ToTable("JawCrusherByDay");
                });

            modelBuilder.Entity("Yunt.Device.Repository.EF.Models.JawCrusherByHour", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("AverageCurrent");

                    b.Property<double>("AverageMotiveSpindleTemperature1");

                    b.Property<double>("AverageMotiveSpindleTemperature2");

                    b.Property<double>("AveragePowerFactor");

                    b.Property<double>("AverageRackSpindleTemperature1");

                    b.Property<double>("AverageRackSpindleTemperature2");

                    b.Property<double>("AverageReactivePower");

                    b.Property<double>("AverageTotalPower");

                    b.Property<double>("AverageVoltage");

                    b.Property<bool>("IsDeleted");

                    b.Property<double>("LoadStall");

                    b.Property<string>("MotorId");

                    b.Property<double>("RunningTime");

                    b.Property<DateTimeOffset>("Time");

                    b.HasKey("Id");

                    b.ToTable("JawCrusherByHour");
                });

            modelBuilder.Entity("Yunt.Device.Repository.EF.Models.MaterialFeeder", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("Current");

                    b.Property<double>("Frequency");

                    b.Property<double>("InFrequency");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("MotorId");

                    b.Property<double>("PowerFactor");

                    b.Property<double>("ReactivePower");

                    b.Property<DateTimeOffset>("Time");

                    b.Property<double>("TotalPower");

                    b.Property<double>("Velocity");

                    b.Property<double>("Voltage");

                    b.HasKey("Id");

                    b.ToTable("MaterialFeeder");
                });

            modelBuilder.Entity("Yunt.Device.Repository.EF.Models.MaterialFeederByDay", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("AverageCurrent");

                    b.Property<double>("AverageFrequency");

                    b.Property<double>("AverageVelocity");

                    b.Property<double>("AverageVoltage");

                    b.Property<bool>("IsDeleted");

                    b.Property<double>("LoadStall");

                    b.Property<string>("MotorId");

                    b.Property<double>("RunningTime");

                    b.Property<DateTimeOffset>("Time");

                    b.HasKey("Id");

                    b.ToTable("MaterialFeederByDay");
                });

            modelBuilder.Entity("Yunt.Device.Repository.EF.Models.MaterialFeederByHour", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("AverageCurrent");

                    b.Property<double>("AverageFrequency");

                    b.Property<double>("AverageVelocity");

                    b.Property<double>("AverageVoltage");

                    b.Property<bool>("IsDeleted");

                    b.Property<double>("LoadStall");

                    b.Property<string>("MotorId");

                    b.Property<double>("RunningTime");

                    b.Property<DateTimeOffset>("Time");

                    b.HasKey("Id");

                    b.ToTable("MaterialFeederByHour");
                });

            modelBuilder.Entity("Yunt.Device.Repository.EF.Models.Motor", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTimeOffset>("BuildTime");

                    b.Property<double>("Capicity");

                    b.Property<int>("EmbeddedDeviceId");

                    b.Property<double>("FeedSize");

                    b.Property<string>("FinalSize");

                    b.Property<string>("Image");

                    b.Property<bool>("IsBeltWeight");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsDisplay");

                    b.Property<bool>("IsMainBeltWeight");

                    b.Property<bool>("IsOutConveyor");

                    b.Property<DateTimeOffset>("LatestDataTime");

                    b.Property<DateTimeOffset>("LatestMaintainTime");

                    b.Property<string>("MotorId");

                    b.Property<double>("MotorPower");

                    b.Property<string>("MotorTypeId");

                    b.Property<string>("Name");

                    b.Property<string>("ProductionLineId");

                    b.Property<string>("SerialNumber");

                    b.Property<int>("Status");

                    b.Property<DateTimeOffset>("Time");

                    b.HasKey("Id");

                    b.ToTable("Motor");
                });

            modelBuilder.Entity("Yunt.Device.Repository.EF.Models.Motortype", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("Capacity");

                    b.Property<string>("Code");

                    b.Property<string>("Description");

                    b.Property<double>("FeedSize");

                    b.Property<string>("ImageUrl");

                    b.Property<string>("MaintenancePeriod");

                    b.Property<double>("MotorPower");

                    b.Property<string>("MotorTypeId");

                    b.Property<string>("Name");

                    b.Property<DateTimeOffset>("Time");

                    b.HasKey("Id");

                    b.ToTable("Motortype");
                });

            modelBuilder.Entity("Yunt.Device.Repository.EF.Models.Pulverizer", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("Current");

                    b.Property<double>("FanCurrent");

                    b.Property<double>("GraderCurrent");

                    b.Property<double>("GraderRotateSpeed");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("MotorId");

                    b.Property<DateTimeOffset>("Time");

                    b.HasKey("Id");

                    b.ToTable("Pulverizer");
                });

            modelBuilder.Entity("Yunt.Device.Repository.EF.Models.PulverizerByDay", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("AverageCurrent");

                    b.Property<double>("AverageFanCurrent");

                    b.Property<double>("AverageGraderCurrent");

                    b.Property<double>("AverageGraderRotateSpeed");

                    b.Property<bool>("IsDeleted");

                    b.Property<double>("LoadStall");

                    b.Property<string>("MotorId");

                    b.Property<double>("RunningTime");

                    b.Property<DateTimeOffset>("Time");

                    b.HasKey("Id");

                    b.ToTable("PulverizerByDay");
                });

            modelBuilder.Entity("Yunt.Device.Repository.EF.Models.PulverizerByHour", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("AverageCurrent");

                    b.Property<double>("AverageFanCurrent");

                    b.Property<double>("AverageGraderCurrent");

                    b.Property<double>("AverageGraderRotateSpeed");

                    b.Property<bool>("IsDeleted");

                    b.Property<double>("LoadStall");

                    b.Property<string>("MotorId");

                    b.Property<double>("RunningTime");

                    b.Property<DateTimeOffset>("Time");

                    b.HasKey("Id");

                    b.ToTable("PulverizerByHour");
                });

            modelBuilder.Entity("Yunt.Device.Repository.EF.Models.ReverHammerCrusher", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("BearingSpeed");

                    b.Property<double>("Current");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("MotorId");

                    b.Property<double>("SpindleTemperature1");

                    b.Property<double>("SpindleTemperature2");

                    b.Property<DateTimeOffset>("Time");

                    b.HasKey("Id");

                    b.ToTable("ReverHammerCrusher");
                });

            modelBuilder.Entity("Yunt.Device.Repository.EF.Models.ReverHammerCrusherByDay", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("BearingSpeed");

                    b.Property<double>("Current");

                    b.Property<bool>("IsDeleted");

                    b.Property<double>("LoadStall");

                    b.Property<string>("MotorId");

                    b.Property<double>("RunningTime");

                    b.Property<double>("SpindleTemperature1");

                    b.Property<double>("SpindleTemperature2");

                    b.Property<DateTimeOffset>("Time");

                    b.HasKey("Id");

                    b.ToTable("ReverHammerCrusherByDay");
                });

            modelBuilder.Entity("Yunt.Device.Repository.EF.Models.ReverHammerCrusherByHour", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("BearingSpeed");

                    b.Property<double>("Current");

                    b.Property<bool>("IsDeleted");

                    b.Property<double>("LoadStall");

                    b.Property<string>("MotorId");

                    b.Property<double>("RunningTime");

                    b.Property<double>("SpindleTemperature1");

                    b.Property<double>("SpindleTemperature2");

                    b.Property<DateTimeOffset>("Time");

                    b.HasKey("Id");

                    b.ToTable("ReverHammerCrusherByHour");
                });

            modelBuilder.Entity("Yunt.Device.Repository.EF.Models.SimonsConeCrusher", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("MotorId");

                    b.Property<double>("OilFeedTempreature");

                    b.Property<double>("OilReturnTempreature");

                    b.Property<double>("TankTemperature");

                    b.Property<DateTimeOffset>("Time");

                    b.HasKey("Id");

                    b.ToTable("SimonsConeCrusher");
                });

            modelBuilder.Entity("Yunt.Device.Repository.EF.Models.SimonsConeCrusherByDay", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("AverageCurrent");

                    b.Property<double>("AverageOilFeedTempreature");

                    b.Property<double>("AverageOilReturnTempreature");

                    b.Property<double>("AverageTankTemperature");

                    b.Property<bool>("IsDeleted");

                    b.Property<double>("LoadStall");

                    b.Property<string>("MotorId");

                    b.Property<double>("RunningTime");

                    b.Property<DateTimeOffset>("Time");

                    b.HasKey("Id");

                    b.ToTable("SimonsConeCrusherByDay");
                });

            modelBuilder.Entity("Yunt.Device.Repository.EF.Models.SimonsConeCrusherByHour", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("AverageCurrent");

                    b.Property<double>("AverageOilFeedTempreature");

                    b.Property<double>("AverageOilReturnTempreature");

                    b.Property<double>("AverageTankTemperature");

                    b.Property<bool>("IsDeleted");

                    b.Property<double>("LoadStall");

                    b.Property<string>("MotorId");

                    b.Property<double>("RunningTime");

                    b.Property<DateTimeOffset>("Time");

                    b.HasKey("Id");

                    b.ToTable("SimonsConeCrusherByHour");
                });

            modelBuilder.Entity("Yunt.Device.Repository.EF.Models.VerticalCrusher", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("BearingTempreature");

                    b.Property<double>("Current");

                    b.Property<double>("Current2");

                    b.Property<bool>("IsDeleted");

                    b.Property<double>("LubricatingOilPressure");

                    b.Property<string>("MotorId");

                    b.Property<double>("OilReturnTempreature");

                    b.Property<double>("Oscillation");

                    b.Property<double>("PowerFactor");

                    b.Property<double>("ReactivePower");

                    b.Property<double>("TankTemperature");

                    b.Property<DateTimeOffset>("Time");

                    b.Property<double>("TotalPower");

                    b.Property<double>("Voltage");

                    b.HasKey("Id");

                    b.ToTable("VerticalCrusher");
                });

            modelBuilder.Entity("Yunt.Device.Repository.EF.Models.VerticalCrusherByDay", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("AverageBearingTempreature");

                    b.Property<double>("AverageCurrent");

                    b.Property<double>("AverageCurrent2");

                    b.Property<double>("AverageOilReturnTempreature");

                    b.Property<double>("AverageOscillation");

                    b.Property<double>("AveragePowerFactor");

                    b.Property<double>("AverageReactivePower");

                    b.Property<double>("AverageTankTemperature");

                    b.Property<double>("AverageTotalPower");

                    b.Property<double>("AverageVoltage");

                    b.Property<bool>("IsDeleted");

                    b.Property<double>("LoadStall");

                    b.Property<string>("MotorId");

                    b.Property<double>("RunningTime");

                    b.Property<DateTimeOffset>("Time");

                    b.HasKey("Id");

                    b.ToTable("VerticalCrusherByDay");
                });

            modelBuilder.Entity("Yunt.Device.Repository.EF.Models.VerticalCrusherByHour", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("AverageBearingTempreature");

                    b.Property<double>("AverageCurrent");

                    b.Property<double>("AverageCurrent2");

                    b.Property<double>("AverageOilReturnTempreature");

                    b.Property<double>("AverageOscillation");

                    b.Property<double>("AveragePowerFactor");

                    b.Property<double>("AverageReactivePower");

                    b.Property<double>("AverageTankTemperature");

                    b.Property<double>("AverageTotalPower");

                    b.Property<double>("AverageVoltage");

                    b.Property<bool>("IsDeleted");

                    b.Property<double>("LoadStall");

                    b.Property<string>("MotorId");

                    b.Property<double>("RunningTime");

                    b.Property<DateTimeOffset>("Time");

                    b.HasKey("Id");

                    b.ToTable("VerticalCrusherByHour");
                });

            modelBuilder.Entity("Yunt.Device.Repository.EF.Models.Vibrosieve", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("Current");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("MotorId");

                    b.Property<double>("PowerFactor");

                    b.Property<double>("ReactivePower");

                    b.Property<DateTimeOffset>("Time");

                    b.Property<double>("TotalPower");

                    b.Property<double>("Voltage");

                    b.HasKey("Id");

                    b.ToTable("Vibrosieve");
                });

            modelBuilder.Entity("Yunt.Device.Repository.EF.Models.VibrosieveByDay", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("AverageCurrent");

                    b.Property<double>("AveragePowerFactor");

                    b.Property<double>("AverageReactivePower");

                    b.Property<double>("AverageTotalPower");

                    b.Property<double>("AverageVoltage");

                    b.Property<bool>("IsDeleted");

                    b.Property<double>("LoadStall");

                    b.Property<string>("MotorId");

                    b.Property<double>("RunningTime");

                    b.Property<DateTimeOffset>("Time");

                    b.HasKey("Id");

                    b.ToTable("VibrosieveByDay");
                });

            modelBuilder.Entity("Yunt.Device.Repository.EF.Models.VibrosieveByHour", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("AverageCurrent");

                    b.Property<double>("AveragePowerFactor");

                    b.Property<double>("AverageReactivePower");

                    b.Property<double>("AverageTotalPower");

                    b.Property<double>("AverageVoltage");

                    b.Property<bool>("IsDeleted");

                    b.Property<double>("LoadStall");

                    b.Property<string>("MotorId");

                    b.Property<double>("RunningTime");

                    b.Property<DateTimeOffset>("Time");

                    b.HasKey("Id");

                    b.ToTable("VibrosieveByHour");
                });
#pragma warning restore 612, 618
        }
    }
}
